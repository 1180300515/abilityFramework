@startuml observer design pattern
class Subject {
    +std::string name
    +std::vector<Observer*> observers
    +const std::string &getName() const
    +virtual void registerObserver(Observer *observer) = 0
    +virtual void unregisterObserver(Observer *observer) = 0
    +virtual void notifyObservers(const std::string &message) = 0
    +void getObserverNums()
    +void transportMessage(Observer *observer, const std::string &message)
}
class observer{
    -std::vector<std::string> subjectNames;
    +void update(const std::string &message)
    +std::vector<std::string> getSubjectNames() const
    +void addSubjectName(const std::string &name)
}
class SubjectManager {
    -std::map<std::string, Subject *> subjects;
    +void addSubject(Subject *subject)
    +Subject *getSubject(const std::string &name)
    +bool unregisterSubject(const std::string &name)
    +void listSubjects()
}
class LANInfo {
    +void registerObserver(Observer *observer)
    +void unregisterObserver(Observer *observer)
    +void notifyObservers(const std::string &message)
    +void getObserverNums()
    +void transportMessage(Observer *observer, const std::string &message)
}
Subject <|-- LANInfo : 实现
Subject o-- observer
SubjectManager o-- Subject
@enduml