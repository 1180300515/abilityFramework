@startuml 设计

namespace DM {
    class DiscoveryManager {
        -DevicePool devicepool
        -DevicePoolExtended devicepoolextended

        -std::function<void(std::map<std::string, std::string>) callback
        -std::function<void()

        +Run()
        +Getdevicepool()
        +Getdevicepoolextended()
    }
    class UDPDiscovery {
        -std::map<std::string, Device> devices
        -std::function<void(std::map<std::string, std::string>) callback

        -std::string getHostName()
        -void udp_broadcast_sender()
        -void udp_broadcast_receiver()
        +RegisterCallback(std::function<void(std::map<std::string, std::string>) callback)


    }
    struct Device
    {
        std::string hostname;
        std::string ip;
        std::time_t last_online_time;
        std::time_t online_duration;
        std::string status;

        bool IsOffline(std::time_t current_time) const

        void Update(const std::string &new_hostname, const std::string &new_status, std::time_t new_timestamp)
    }
    class BLEDiscovery {

    }


    class DevicePool {
        -std::map<std::string, DeviceProfile> deviceList

        +DevicePool(std::string hostname, DeviceProfile& localDeviceProfile)
        +void addDevice(const std::string& hostname, const DeviceProfile& deviceProfile)
        +void removeDevice(const std::string& hostname)
        +void updateDevice(const std::string& hostname, const DeviceProfile& deviceProfile)
        +const std::map<std::string, DeviceProfile>& getDeviceList() const
    }

    class DevicePoolExtended {
        -std::vector<std::string> micDevices
        -std::vector<std::string> speakerDevices
        -std::vector<std::string> cameraDevices
        -std::vector<std::string> displayDevices

        +DevicePoolExtended(DevicePool &devicePool)
        +void addDevice(std::string hostname, DeviceProfile &deviceProfile)
        +void deleteDevice(std::string hostname)
        +void updateDevice(std::string hostname, DeviceProfile &deviceProfile)
        +void print()
    }

    DiscoveryManager *-- DevicePool : 组合
    DiscoveryManager *-- DevicePoolExtended : 组合

    note right of DiscoveryManager
    负责设备发现
    end note
}




namespace RM {
    class ResourceManager {
        -std::shared_ptr<HardwareScan> hardware_
        -std::shared_ptr<ResourceSyncManager> sync_

        +std::map<std::string, std::string> versionRecord
        +std::map<std::string, std::shared_ptr<InstanceInfo>> instances_
        +std::map<std::string, std::shared_ptr<AbilityInfo>> abilities_
        +std::map<std::string, std::shared_ptr<NonLocalResource>> nonlocal_instances_

        +std::mutex nonlocal_lock_
        +std::mutex abilities_lock_
        +std::mutex instances_lock_


        +std::shared_ptr<Controller> getptr()
        +Controller() = default
        +~Controller() = default

        +std::string isLocalResource(std::string key)

        +void LoadLocalResource()
        +void Init()

        +void Run()
        +void RefreshKVRecord()
        +std::string GetNonLocalFormat()
    }
    note left of ResourceManager::instances_
    将各种device合并到一起,避免后续增加时改动过多
    end note

    note left of ResourceManager::OnEdgeAddressRecord
    局域网内设备扫描后清单的回调,DiscoveryManager调用
    end note

    note right of ResourceManager
    负责本机资源管理，包括
    从数据库中读取资源到内存中
    硬件扫描，生成资源，存入数据库
    和其他端及云端的资源同步
    end note

    class HardwareScan {
        -DeviceProfile profile
        -void insertCameraInfo(Json::Value &jnode)
        -void insertMicInfo(Json::Value &jnode)
        -void insertloudspeakerInfo(Json::Value &jnode)


        +LocalHardwareScan()
        +AutoGenerateCR()
        +DeviceProfile getHardwareInfo()
    }

    class ResourceSyncManager
    {
        -std::shared_ptr<ConnectionManager> connection_

        +ResourceSyncManager()
        +~ResourceSyncManager() = default


        +void CloudSyncThread()
        +void EdgeSyncServerThread()
        +void EdgeSyncThread()
        +void Run()
    }

    class DeviceProfile {
        +std::vector<CameraHardware> cameraDevices
        +std::vector<DisplayInfo> displayDevices
        +std::vector<AudioDevice> micDevices
        +std::vector<AudioDevice> speakerDevices
        +Json::Value toJson() const
        +void print()
    }
    ResourceManager *-- ResourceSyncManager : 组合
    ResourceManager *-- HardwareScan : 组合

    class CameraInstanceInfo
    {
        +CameraSpec spec
        +std::string Marshal()
        +bool UnMarshal(std::string source)
        +bool updateInstance(std::string data)
        +std::string getInstanceVersion()
    }
    class LoudspeakerInstanceInfo
    {
        +LoudspeakerSpec spec
        +std::string Marshal()
        +bool UnMarshal(std::string source)
        +bool updateInstance(std::string data)
        +std::string getInstanceVersion()
    }
    class MicrophoneInstanceInfo {
        +MicrophoneSpec spec
        +std::string Marshal()
        +bool UnMarshal(std::string source)
        +bool updateInstance(std::string data)
        +std::string getInstanceVersion()
    }
    class SensorInstanceInfo
    {
        +SensorSpec spec
        +std::string Marshal()
        +std::string UnMarshal(std::string source)
        +bool updateInstance(std::string data)
        +std::string getInstanceVersion()
    }
    class AbilityInfo {
        +std::string apiVersion
        +std::string kind
        +Metadata metadata
        +std::string level
        +std::string abilityname
        +std::string description
        +std::string followed
        +Abilitydepends depends
        +std::map<std::string, std::string> spec
        +std::vector<Aapi> ApiList
        +std::vector<Aabilityinstance> abilityinstancelist

        +std::mutex abilitylock_

        +bool UnMarshal(const std::string source)
        +std::string Marshal()
        +bool updateAbility(std::string data)
    }
    abstract class InstanceInfo
    {
        +std::string apiVersion
        +std::string kind
        +Metadata metadata
        +Status status
        +Api api
        +std::mutex resourcelock_
        +std::vector<DeviceDescribe> devicelist
        +virtual std::string Marshal() = 0
        +virtual bool UnMarshal(std::string source)
        +virtual bool updateInstance(std::string data) = 0
        +virtual void GetInstanceSpec(T &result)
    }
    class CameraInstanceInfo extends InstanceInfo
    class LoudspeakerInstanceInfo extends InstanceInfo
    class SensorInstanceInfo extends InstanceInfo
    class MicrophoneInstanceInfo extends InstanceInfo


}



namespace DB {
    class DBManager {
        -static std::vector<CrdDBStruct> crdstructs
        -static std::vector<InstanceDBStruct> instancestructs
        -static std::vector<AbilityDBStruct> abilitystructs
        -sqlite3 *db
        -static int crd_callback(void *unused, int columenCount, char **columnValue, char **columnName)
        -static int instance_callback(void *unused, int columenCount, char **columnValue, char **columnName)
        -static int ability_callback(void *unused, int columenCount, char **columnValue, char **columnName)
        -static int cloud_address_callback(void *unused, int columenCount, char **columnValue, char **columnName)
        -dbManager()

        +static dbManager &getInstance()
        +~dbManager() = default
        +dbManager(const dbManager &) = delete
        +dbManager &operator=(const dbManager) = delete
        +bool DBAddCRDFromFile(const std::string &filepath)
        +bool DBAddAbilityFromFile(const std::string &filepath)
        +bool DBAddDeviceFromFile(const std::string &filepath)
        +bool DBGetAllDeviceInstances(std::string resourcetype, std::map<std::string, std::string> &result)
        +bool DBGetAllAbilityInstances(std::string resourcetype, std::map<std::string, std::string> &result)
        +bool DBStoreDeviceInstance(std::string &data)
        +bool DBUpdateDeviceInstance(std::string &data)
        +bool DBDelteDeviceInstance(std::string &key)
        +bool DBStoreAbilityInstance(std::string &data)
        +bool DBUpdateAbilityInstance(std::string &data)
        +bool DBDeleteAbilityInstance(std::string &key)
        +bool DBStoreCloudAddress()
        +bool DBGetCloudAddress()
        +bool DBCleanDeviceInstances()
        +bool DBCleanAbility()
        +bool DBCleanCRD()
    }
    note left of DBManager::DBGetAllDeviceInstances
    考虑到未来可能会增加新的设备类型，去除类中的具有实际类型的函数
    修改为string。由对应调用者自行解析
    end note
    note right of DBManager
    负责数据库管理
    对外提供操作数据库的接口
    采用单例模式
    end note

    struct CrdDBStruct {
        // the name in metadata
        std::string key
        // the whole file
        std::string value
        // the group in the spec
        std::string group
        // the kind in the names field of the spec
        std::string kind
        // the schama part
        std::string schema
    }
    struct InstanceDBStruct
    {
        // the name in the metadata
        std::string name
        // the namespace in the metadata
        std::string namespace_name
        // the whole file
        std::string value
        // the group in the apiVersion
        std::string group
        // the kind in the file
        std::string kind
        // the version in the apiVersion
        std::string version
    }
    struct AbilityDBStruct
    {
        // the abilityname
        std::string name
        // the namespace in the metadata
        std::string namespace_name
        // the whole file
        std::string value
        // the group in the apiVersion
        std::string group
        // the kind in the file
        std::string kind
        // the version in the apiVersion
        std::string version
    }
}

namespace HS {
    class HttpServer {
        -std::string address

        +run_http_server()
    }
}

namespace LC {

    class LifeCycleDeal {
        -std::unordered_map<int, std::thread> threads
        -std::unordered_map<int, std::unique_ptr<AbilityClient>> clients
        -std::unordered_map<int, HeartbeatInfo> heartbeat_map
        -std::mutex heartbeat_map_mutex

        -void controlProcess(AbilityClient &client, const int &port, HeartbeatInfo &hbinfo, std::optional<CommandInfo> &cmdinfo)
        +void handleHeartbeat(std::optional<CommandInfo> cmd_info)
        +void AddHeartbeatInfo(HeartbeatInfo info)
        
        +void check_timeout()
        +void check_process()

    }
    note left of LifeCycleDeal::threads
    单独的线程
    调用clients中对应的去完成传入参数的要求
    end note
    note left of LifeCycleDeal::clients
    和ability通信的RPC客户端
    end note
    note left of LifeCycleDeal::heartbeat_map
    接收到的心跳包,作为判断client是否存活的依据
    end note
    note right of LifeCycleDeal
    负责管理能力生命周期
    end note

    class AbilityClient {
        -std::unique_ptr<abilityUnit::Ability::Stub> stub_
        +void Start(const abilityUnit::StartInfo &start_info)
        +void Connect(const abilityUnit::ConnectInfo &connect_info)
        +void Disconnect(const abilityUnit::DisconnectInfo &disconnect_info)
        +void Terminate(const abilityUnit::TerminateInfo &terminate_info)

    }
    class CommandInfo {
        +int port
        +std::string abilityName
        +std::string cmd
        +int connectPort
        +std::string connectIP
        +CommandInfo(int port, std::string abilityName, std::string cmd, int connectPort, std::string connectIP)
        +Json::Value toJson()
        +void print()
    }
    LifeCycleDeal *-- AbilityClient : 组合
    LifeCycleDeal o-- CommandInfo : 聚合

    struct HeartbeatInfo {
        std::string abilityName
        int abilityPort
        std::string status
        std::chrono::steady_clock::time_point last_update

        Json::Value toJson(int port) const
    }

    
}

namespace ARM {
    struct TreeNode {
        AbilityInfoExtract ability
        std::vector<TreeNode> children
        int level
    }
    class AbilityRelationManager {
        -std::unordered_map<std::string, TreeNode> map

        +void GenerateDependTree(AbilityInfoExtractList& list, DevicePoolExtended& devicePool)
        +std::string serializeDependTree()
        -void GenerateNodes(TreeNode& node, DevicePoolExtended& devicePool, DependTreeArray& treeArray)
    }

    note right of AbilityRelationManager
    负责构建能力的关系树
    end note
}

namespace CM {
    enum ProtocolTendency {
        Default
        SpeedFirst
        LowPowerFirst
    }
    enum ProtocolType {
        UDP
        TCP
        WebSocket
        HTTP
        BLE
    }
    struct ConnectInfo {
        std::string destinationAddress
        ProtocolType protocolType
        ProtocolTendency priority
    }
    class ConnectionManager {
        -std::map<std::string, ConnectInfo> EndAddressRecord_
        -std::mutex endlock_
        -std::map<std::string, ConnectInfo> cloudAddressRecord_
        -std::mutex cloudlock_

        -std::map<std::string, std::shared_ptr<IConnection>> CloudConnectionRecord
        -std::map<std::string, std::shared_ptr<IConnection>> EndConnectionRecord

        -std::function<void(std::string)> CloudDataCallback_
        -std::function<void(std::string)> EndDataCallback_

        +OnEdgeAddressRecordChange(std::map<std::string, ConnectInfo> &address)
        +OnCloudAddressRecordChange(std::map<std::string, ConnectInfo> &address)

        +Init(std::function<void(std::string bytes)> cloud,std::function<void(std::string bytes)>end)
        +void ConnectWithEnd()
        +void ConnectWithCloud()
        +void DisconnectWithEnd()
        +void DisconnectWithCloud()
        +void SendAndReceviceMessageToCloud(std::string data)
        +void SendAndReceviceMessageToEnd(std::string data)
    }
    interface IConnection{
        +virtual bool Connect(std::string address)
        +virtual bool Disconnect()
        +virtual std::string SendAndReceviceMessage(std::string data)
    }

    class ConnectbyUDP {
        -int sockId_

        +ConnectbyUDP(std::string address) = default
        +~ConnectbyUDP() = default
        +bool Connect(std::string address)
        +void Disconnect()
        +std::string SendAndReceviceMessage(std::string data)
    }

    class ConnectbyTCP {
        -const char *tcpaddr
        -uint16_t tcpport
        -int sockid = -1

        +ConnectbyTCP() = default
        +~ConnectbyTCP() = default
        +bool Connect(std::string address)
        +bool Disconnect()
        +std::string SendAndReceviceMessage(std::string data)
    }

    class ConnectbyWebSocket {

    }

    class ConnectbyHTTP {

    }

    class ConnectbyBLE {

    }

    note left of ConnectionManager::Init
    初始化时需要指定处理消息的函数
    end note
    note right of ConnectionManager
    负责管理和end，cloud的连接，数据发送和接收
    预期设计希望能够实现传输协议的自选择（如根据速度需求，功耗需求等）
    end note

    IConnection <|-- ConnectbyBLE
    IConnection <|-- ConnectbyHTTP
    IConnection <|-- ConnectbyUDP
    IConnection <|-- ConnectbyTCP
    IConnection <|-- ConnectbyWebSocket
    ConnectionManager *-- IConnection
}

DB <-left-> RM.ResourceManager
CM <-up-> RM.ResourceSyncManager
DM <--> HS.HttpServer
LC <-up-> HS.HttpServer
RM <-left-> HS.HttpServer
ARM <--> HS.HttpServer


@enduml