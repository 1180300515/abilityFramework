#include <iostream>
#include <vector>
#include <portaudio.h>

struct AudioDeviceInfo {
    int deviceId;
    std::string deviceName;
    int maxInputChannels;
    int maxOutputChannels;
    double defaultSampleRate;
};

std::vector<AudioDeviceInfo> getAudioDevices() {
    std::vector<AudioDeviceInfo> devices;

    PaError err = Pa_Initialize();
    if (err != paNoError) {
        std::cerr << "PortAudio error: " << Pa_GetErrorText(err) << std::endl;
        return devices;
    }

    int numDevices = Pa_GetDeviceCount();
    if (numDevices < 0) {
        std::cerr << "PortAudio error: " << Pa_GetErrorText(numDevices) << std::endl;
        return devices;
    }

    for (int i = 0; i < numDevices; ++i) {
        const PaDeviceInfo *deviceInfo = Pa_GetDeviceInfo(i);

        AudioDeviceInfo audioDevice;
        audioDevice.deviceId = i;
        audioDevice.deviceName = deviceInfo->name;
        audioDevice.maxInputChannels = deviceInfo->maxInputChannels;
        audioDevice.maxOutputChannels = deviceInfo->maxOutputChannels;
        audioDevice.defaultSampleRate = deviceInfo->defaultSampleRate;

        devices.push_back(audioDevice);
    }

    Pa_Terminate();
    return devices;
}

int main() {
    std::vector<AudioDeviceInfo> devices = getAudioDevices();

    for (const auto &device : devices) {
        std::cout << "Device ID: " << device.deviceId << std::endl;
        std::cout << "Device Name: " << device.deviceName << std::endl;
        std::cout << "Max Input Channels: " << device.maxInputChannels << std::endl;
        std::cout << "Max Output Channels: " << device.maxOutputChannels << std::endl;
        std::cout << "Default Sample Rate: " << device.defaultSampleRate << std::endl;
        std::cout << std::endl;
    }

    return 0;
}
