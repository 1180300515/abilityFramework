// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: abilityProto.proto

#include "abilityProto.pb.h"
#include "abilityProto.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace abilityUnit {

static const char* Ability_method_names[] = {
  "/abilityUnit.Ability/Start",
  "/abilityUnit.Ability/Connect",
  "/abilityUnit.Ability/Disconnect",
  "/abilityUnit.Ability/Terminate",
};

std::unique_ptr< Ability::Stub> Ability::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Ability::Stub> stub(new Ability::Stub(channel, options));
  return stub;
}

Ability::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Start_(Ability_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Connect_(Ability_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Disconnect_(Ability_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Terminate_(Ability_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Ability::Stub::Start(::grpc::ClientContext* context, const ::abilityUnit::StartInfo& request, ::abilityUnit::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::abilityUnit::StartInfo, ::abilityUnit::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Start_, context, request, response);
}

void Ability::Stub::async::Start(::grpc::ClientContext* context, const ::abilityUnit::StartInfo* request, ::abilityUnit::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::abilityUnit::StartInfo, ::abilityUnit::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, std::move(f));
}

void Ability::Stub::async::Start(::grpc::ClientContext* context, const ::abilityUnit::StartInfo* request, ::abilityUnit::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::abilityUnit::Response>* Ability::Stub::PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::abilityUnit::StartInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::abilityUnit::Response, ::abilityUnit::StartInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::abilityUnit::Response>* Ability::Stub::AsyncStartRaw(::grpc::ClientContext* context, const ::abilityUnit::StartInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ability::Stub::Connect(::grpc::ClientContext* context, const ::abilityUnit::ConnectInfo& request, ::abilityUnit::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::abilityUnit::ConnectInfo, ::abilityUnit::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Connect_, context, request, response);
}

void Ability::Stub::async::Connect(::grpc::ClientContext* context, const ::abilityUnit::ConnectInfo* request, ::abilityUnit::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::abilityUnit::ConnectInfo, ::abilityUnit::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void Ability::Stub::async::Connect(::grpc::ClientContext* context, const ::abilityUnit::ConnectInfo* request, ::abilityUnit::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::abilityUnit::Response>* Ability::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::abilityUnit::ConnectInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::abilityUnit::Response, ::abilityUnit::ConnectInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Connect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::abilityUnit::Response>* Ability::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::abilityUnit::ConnectInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ability::Stub::Disconnect(::grpc::ClientContext* context, const ::abilityUnit::DisconnectInfo& request, ::abilityUnit::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::abilityUnit::DisconnectInfo, ::abilityUnit::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Disconnect_, context, request, response);
}

void Ability::Stub::async::Disconnect(::grpc::ClientContext* context, const ::abilityUnit::DisconnectInfo* request, ::abilityUnit::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::abilityUnit::DisconnectInfo, ::abilityUnit::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disconnect_, context, request, response, std::move(f));
}

void Ability::Stub::async::Disconnect(::grpc::ClientContext* context, const ::abilityUnit::DisconnectInfo* request, ::abilityUnit::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disconnect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::abilityUnit::Response>* Ability::Stub::PrepareAsyncDisconnectRaw(::grpc::ClientContext* context, const ::abilityUnit::DisconnectInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::abilityUnit::Response, ::abilityUnit::DisconnectInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Disconnect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::abilityUnit::Response>* Ability::Stub::AsyncDisconnectRaw(::grpc::ClientContext* context, const ::abilityUnit::DisconnectInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisconnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ability::Stub::Terminate(::grpc::ClientContext* context, const ::abilityUnit::TerminateInfo& request, ::abilityUnit::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::abilityUnit::TerminateInfo, ::abilityUnit::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Terminate_, context, request, response);
}

void Ability::Stub::async::Terminate(::grpc::ClientContext* context, const ::abilityUnit::TerminateInfo* request, ::abilityUnit::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::abilityUnit::TerminateInfo, ::abilityUnit::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Terminate_, context, request, response, std::move(f));
}

void Ability::Stub::async::Terminate(::grpc::ClientContext* context, const ::abilityUnit::TerminateInfo* request, ::abilityUnit::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Terminate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::abilityUnit::Response>* Ability::Stub::PrepareAsyncTerminateRaw(::grpc::ClientContext* context, const ::abilityUnit::TerminateInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::abilityUnit::Response, ::abilityUnit::TerminateInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Terminate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::abilityUnit::Response>* Ability::Stub::AsyncTerminateRaw(::grpc::ClientContext* context, const ::abilityUnit::TerminateInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTerminateRaw(context, request, cq);
  result->StartCall();
  return result;
}

Ability::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ability_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ability::Service, ::abilityUnit::StartInfo, ::abilityUnit::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Ability::Service* service,
             ::grpc::ServerContext* ctx,
             const ::abilityUnit::StartInfo* req,
             ::abilityUnit::Response* resp) {
               return service->Start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ability_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ability::Service, ::abilityUnit::ConnectInfo, ::abilityUnit::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Ability::Service* service,
             ::grpc::ServerContext* ctx,
             const ::abilityUnit::ConnectInfo* req,
             ::abilityUnit::Response* resp) {
               return service->Connect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ability_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ability::Service, ::abilityUnit::DisconnectInfo, ::abilityUnit::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Ability::Service* service,
             ::grpc::ServerContext* ctx,
             const ::abilityUnit::DisconnectInfo* req,
             ::abilityUnit::Response* resp) {
               return service->Disconnect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ability_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ability::Service, ::abilityUnit::TerminateInfo, ::abilityUnit::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Ability::Service* service,
             ::grpc::ServerContext* ctx,
             const ::abilityUnit::TerminateInfo* req,
             ::abilityUnit::Response* resp) {
               return service->Terminate(ctx, req, resp);
             }, this)));
}

Ability::Service::~Service() {
}

::grpc::Status Ability::Service::Start(::grpc::ServerContext* context, const ::abilityUnit::StartInfo* request, ::abilityUnit::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ability::Service::Connect(::grpc::ServerContext* context, const ::abilityUnit::ConnectInfo* request, ::abilityUnit::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ability::Service::Disconnect(::grpc::ServerContext* context, const ::abilityUnit::DisconnectInfo* request, ::abilityUnit::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ability::Service::Terminate(::grpc::ServerContext* context, const ::abilityUnit::TerminateInfo* request, ::abilityUnit::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace abilityUnit

